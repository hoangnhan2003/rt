// <auto-generated />
using System;
using Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Active_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveTypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ActiveType", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Issue_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Issue_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Git", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Project_Id")
                        .IsUnique();

                    b.ToTable("Git", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Git_Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GitRepoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Git_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Git_Id");

                    b.ToTable("GitRepo", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Active_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveTypeId");

                    b.HasIndex("Project_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("History", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Asssignee")
                        .HasColumnType("int");

                    b.Property<int?>("Category_Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("Due_Date")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("File")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("IssueType_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Priority_Id")
                        .HasColumnType("int");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Status_Id")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("UserCreate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.HasIndex("IssueType_Id");

                    b.HasIndex("Priority_Id");

                    b.HasIndex("Project_Id");

                    b.HasIndex("Status_Id");

                    b.ToTable("Issue", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Issue_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IssueTypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("IssueType", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Member_Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("MemberRole", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PriorytyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Priority", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Space_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Space_Id");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Project_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemberRoleId")
                        .HasColumnType("int");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberRoleId");

                    b.HasIndex("Project_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ProjectUser", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Space", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SpaceName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Space", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Space_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemberRoleId")
                        .HasColumnType("int");

                    b.Property<int>("Space_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberRoleId");

                    b.HasIndex("Space_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("SpaceUser", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Avatar")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Wiki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<string>("WikiContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("Wiki", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Comment", b =>
                {
                    b.HasOne("Domain.Entity.Issue", "Issue")
                        .WithMany("Comment")
                        .HasForeignKey("Issue_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.Git", b =>
                {
                    b.HasOne("Domain.Entity.Project", "Project")
                        .WithOne("Git")
                        .HasForeignKey("Domain.Entity.Git", "Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entity.Git_Repo", b =>
                {
                    b.HasOne("Domain.Entity.Git", "Git")
                        .WithMany("Git_Repos")
                        .HasForeignKey("Git_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Git");
                });

            modelBuilder.Entity("Domain.Entity.History", b =>
                {
                    b.HasOne("Domain.Entity.Active_Type", "Active_Types")
                        .WithMany()
                        .HasForeignKey("ActiveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Project", "Project")
                        .WithMany("Histories")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Active_Types");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.Issue", b =>
                {
                    b.HasOne("Domain.Entity.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("Category_Id");

                    b.HasOne("Domain.Entity.Issue_Type", "Issue_Types")
                        .WithMany()
                        .HasForeignKey("IssueType_Id");

                    b.HasOne("Domain.Entity.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("Priority_Id");

                    b.HasOne("Domain.Entity.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Status", "Statuses")
                        .WithMany()
                        .HasForeignKey("Status_Id");

                    b.Navigation("Categories");

                    b.Navigation("Issue_Types");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Domain.Entity.Project", b =>
                {
                    b.HasOne("Domain.Entity.Space", "Space")
                        .WithMany("Projects")
                        .HasForeignKey("Space_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Domain.Entity.Project_User", b =>
                {
                    b.HasOne("Domain.Entity.Member_Role", "Member_Roles")
                        .WithMany()
                        .HasForeignKey("MemberRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "Users")
                        .WithMany("Project_Users")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member_Roles");

                    b.Navigation("Project");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entity.Space_User", b =>
                {
                    b.HasOne("Domain.Entity.Member_Role", "Member_Roles")
                        .WithMany()
                        .HasForeignKey("MemberRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Space", "Space")
                        .WithMany("Space_Users")
                        .HasForeignKey("Space_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "Users")
                        .WithMany("Space_Users")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member_Roles");

                    b.Navigation("Space");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entity.Wiki", b =>
                {
                    b.HasOne("Domain.Entity.Project", "Project")
                        .WithMany("Wiki")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entity.Git", b =>
                {
                    b.Navigation("Git_Repos");
                });

            modelBuilder.Entity("Domain.Entity.Issue", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Domain.Entity.Project", b =>
                {
                    b.Navigation("Git");

                    b.Navigation("Histories");

                    b.Navigation("Issues");

                    b.Navigation("ProjectUsers");

                    b.Navigation("Wiki");
                });

            modelBuilder.Entity("Domain.Entity.Space", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Space_Users");
                });

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.Navigation("Project_Users");

                    b.Navigation("Space_Users");
                });
#pragma warning restore 612, 618
        }
    }
}
